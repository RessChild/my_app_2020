{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","slice","map","genre","idx","key","prototype","id","PropTypes","number","isRequired","string","arrayOf","App","state","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"4UAIA,SAASA,EAAT,GAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC3C,OACI,yBAAKC,UAAU,SACX,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,cACX,wBAAIA,UAAU,eAAgBJ,GAC9B,wBAAII,UAAU,cAAeL,GAC7B,uBAAGK,UAAU,iBAAkBH,EAAQM,MAAM,EAAE,KAA/C,OACA,wBAAIH,UAAU,gBACTD,EAAOK,KAAI,SAACC,EAAOC,GAAR,OACR,wBAAIC,IAAMD,EAAMN,UAAU,gBAChBK,SAWlCX,EAAMc,UAAY,CACdC,GAAIC,IAAUC,OAAOC,WACrBjB,KAAMe,IAAUC,OAAOC,WACvBhB,MAAOc,IAAUG,OAAOD,WACxBf,QAASa,IAAUG,OAAOD,WAC1Bd,OAAQY,IAAUG,OAAOD,WACzBb,OAAQW,IAAUI,QAAQJ,IAAUG,QAAQD,YAGjClB,QCiCAqB,G,iNA5DbC,MAAQ,CACNC,WAAY,EACZC,OAAS,I,EAGXC,U,sBAAY,8BAAAC,EAAA,sEAK2BC,IAAMC,IAAI,4DALrC,gBAKSJ,EALT,EAKHK,KAAMA,KAAML,OAEnBM,QAAQC,IAAIP,GAIZ,EAAKQ,SAAS,CAAER,SAAQD,WAAW,IAXzB,2C,mFAgBVU,KAAKR,c,+BAQE,IAAD,EACwBQ,KAAKX,MAA3BC,EADF,EACEA,UAAWC,EADb,EACaA,OACnB,OAGE,6BAASlB,UAAU,aAChBiB,EACC,yBAAKjB,UAAU,UACb,0BAAMA,UAAU,eAAhB,eAGF,yBAAKA,UAAU,UACXkB,EAAOd,KAAI,SAAAwB,GAAK,OAChB,kBAAC,EAAD,CACErB,IAAKqB,EAAMnB,GACXA,GAAImB,EAAMnB,GACVd,KAAMiC,EAAMjC,KACZC,MAAOgC,EAAMhC,MACbC,QAAS+B,EAAM/B,QACfC,OAAQ8B,EAAMC,mBACd9B,OAAQ6B,EAAM7B,mB,GAnDZ+B,IAAMC,YCFxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e4f60210.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ year, title, summary, poster, genres }) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <img src={poster} alt={title} title={title}></img> \r\n            <div className=\"movie_data\">\r\n                <h3 className=\"movie_title\">{ title }</h3>\r\n                <h5 className=\"movie_year\">{ year }</h5>\r\n                <p className=\"movie_summary\">{ summary.slice(0,140) }...</p>\r\n                <ul className=\"movie_genres\">\r\n                    {genres.map((genre, idx) => (\r\n                        <li key={ idx } className=\"genres_genre\"> \r\n                                { genre }\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </div>);\r\n}\r\n// list 는 고유의 키 번호값을 요구\r\n// map 함수의 경우, item number 라는 값을 추가로 제공해줌\r\n// 이를 idx 라는 이름으로 받아와 사용\r\n\r\nMovie.prototype = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n}\r\n\r\nexport default Movie;","import React from 'react';\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\"\nimport Proptypes from\"prop-types\";\n\nclass App extends React.Component{\n  // 객체화 시킨 이상, 일반적인 함수처럼 return이 있는게 아님\n  state = {\n    isLoading : true,\n    movies : [],\n  }\n\n  getMovies = async () => {\n     // 해당 주소로부터 json 파일을 받아옴 (fetch 와 동일)\n    // 다만, 받아오는 시간이 느릴 수 있으니 대기함을 알려줘야함\n    // async 명령을 통해 비동기화 시킴 (기다려야한다)\n    // await 는 대기할 함수를 정의시킴\n    const {data:{data:{movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n\n    console.log(movies);\n    // react 의 경우, 전체를 받아와서 내부 원소를 호출하는 형식 외에\n    // 데이터 구조를 순차적으로 작성하여 직접 접근하는 방식도 가능\n\n    this.setState({ movies, isLoading: false });\n    // state 명과 변수명이 동일한 경우, 알아서 처리해줌\n    }\n  \n  componentDidMount() {\n    this.getMovies();\n    /*\n    setTimeout(()=>{\n      this.setState({isLoading : false});\n    }, 6000)\n    */\n  }\n\n  render(){\n    const { isLoading, movies } = this.state;\n    return (\n      // HTML 처럼 보여도, 자바스크립트\n      // so, class 대신 className 을 사용해줘야 함\n      <section className=\"container\">\n        {isLoading ? ( \n          <div className=\"loader\">\n            <span className=\"loader_text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            { movies.map(movie => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n          )}\n      </section>\n    )\n    // react 는 기본적으로 모든 class 에 있는 render 함수를 실행시키려함\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}